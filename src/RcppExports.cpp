// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// SAMM
List SAMM(const arma::mat& Y, const arma::mat& X, const Rcpp::List& Zlist, const Rcpp::List& Klist, double lambda, const arma::mat& W, const Rcpp::List& R, const Rcpp::List& Siglist, const arma::uvec& corfunc, const arma::uvec& corfuncfixed, const arma::uvec& sigfunc, const std::string mmalg, const double& tolparconv, const double& tolparinv, const int& maxiter, bool geterrors, bool Hinv);
RcppExport SEXP SAMM_SAMM(SEXP YSEXP, SEXP XSEXP, SEXP ZlistSEXP, SEXP KlistSEXP, SEXP lambdaSEXP, SEXP WSEXP, SEXP RSEXP, SEXP SiglistSEXP, SEXP corfuncSEXP, SEXP corfuncfixedSEXP, SEXP sigfuncSEXP, SEXP mmalgSEXP, SEXP tolparconvSEXP, SEXP tolparinvSEXP, SEXP maxiterSEXP, SEXP geterrorsSEXP, SEXP HinvSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Zlist(ZlistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Klist(KlistSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Siglist(SiglistSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type corfunc(corfuncSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type corfuncfixed(corfuncfixedSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type sigfunc(sigfuncSEXP);
    Rcpp::traits::input_parameter< const std::string >::type mmalg(mmalgSEXP);
    Rcpp::traits::input_parameter< const double& >::type tolparconv(tolparconvSEXP);
    Rcpp::traits::input_parameter< const double& >::type tolparinv(tolparinvSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< bool >::type geterrors(geterrorsSEXP);
    Rcpp::traits::input_parameter< bool >::type Hinv(HinvSEXP);
    __result = Rcpp::wrap(SAMM(Y, X, Zlist, Klist, lambda, W, R, Siglist, corfunc, corfuncfixed, sigfunc, mmalg, tolparconv, tolparinv, maxiter, geterrors, Hinv));
    return __result;
END_RCPP
}
// ar1cov_cppforR
arma::mat ar1cov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_ar1cov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(ar1cov_cppforR(params, data));
    return __result;
END_RCPP
}
// ar1hetcov_cppforR
arma::mat ar1hetcov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_ar1hetcov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(ar1hetcov_cppforR(params, data));
    return __result;
END_RCPP
}
// arma11cov_cppforR
arma::mat arma11cov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_arma11cov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(arma11cov_cppforR(params, data));
    return __result;
END_RCPP
}
// compsymmcov_cppforR
arma::mat compsymmcov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_compsymmcov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(compsymmcov_cppforR(params, data));
    return __result;
END_RCPP
}
// compsymmhetcov_cppforR
arma::mat compsymmhetcov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_compsymmhetcov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(compsymmhetcov_cppforR(params, data));
    return __result;
END_RCPP
}
// lincombcov_cppforR
arma::mat lincombcov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_lincombcov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(lincombcov_cppforR(params, data));
    return __result;
END_RCPP
}
// unstrcov_cppforR
arma::mat unstrcov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_unstrcov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(unstrcov_cppforR(params, data));
    return __result;
END_RCPP
}
// diagcov_cppforR
arma::mat diagcov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_diagcov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(diagcov_cppforR(params, data));
    return __result;
END_RCPP
}
// unstrKronKcov_cppforR
arma::mat unstrKronKcov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_unstrKronKcov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(unstrKronKcov_cppforR(params, data));
    return __result;
END_RCPP
}
// diagKronKcov_cppforR
arma::mat diagKronKcov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_diagKronKcov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(diagKronKcov_cppforR(params, data));
    return __result;
END_RCPP
}
// ar1KronKcov_cppforR
arma::mat ar1KronKcov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_ar1KronKcov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(ar1KronKcov_cppforR(params, data));
    return __result;
END_RCPP
}
// ar1hetKronKcov_cppforR
arma::mat ar1hetKronKcov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_ar1hetKronKcov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(ar1hetKronKcov_cppforR(params, data));
    return __result;
END_RCPP
}
// arma11KronKcov_cppforR
arma::mat arma11KronKcov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_arma11KronKcov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(arma11KronKcov_cppforR(params, data));
    return __result;
END_RCPP
}
// compsymmKronKcov_cppforR
arma::mat compsymmKronKcov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_compsymmKronKcov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(compsymmKronKcov_cppforR(params, data));
    return __result;
END_RCPP
}
// compsymmhetKronKcov_cppforR
arma::mat compsymmhetKronKcov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_compsymmhetKronKcov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(compsymmhetKronKcov_cppforR(params, data));
    return __result;
END_RCPP
}
// UnstrKronUnstrcov_cppforR
arma::mat UnstrKronUnstrcov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_UnstrKronUnstrcov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(UnstrKronUnstrcov_cppforR(params, data));
    return __result;
END_RCPP
}
// rbfcov_cppforR
arma::mat rbfcov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_rbfcov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(rbfcov_cppforR(params, data));
    return __result;
END_RCPP
}
// expcov_cppforR
arma::mat expcov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_expcov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(expcov_cppforR(params, data));
    return __result;
END_RCPP
}
// rbfdistcov_cppforR
arma::mat rbfdistcov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_rbfdistcov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(rbfdistcov_cppforR(params, data));
    return __result;
END_RCPP
}
// expdistcov_cppforR
arma::mat expdistcov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_expdistcov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(expdistcov_cppforR(params, data));
    return __result;
END_RCPP
}
// relmatcov_cppforR
arma::mat relmatcov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_relmatcov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(relmatcov_cppforR(params, data));
    return __result;
END_RCPP
}
// ConstMatcov_cppforR
arma::mat ConstMatcov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_ConstMatcov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(ConstMatcov_cppforR(params, data));
    return __result;
END_RCPP
}
// KKronunstrcov_cppforR
arma::mat KKronunstrcov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_KKronunstrcov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(KKronunstrcov_cppforR(params, data));
    return __result;
END_RCPP
}
// KKrondiagcov_cppforR
arma::mat KKrondiagcov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_KKrondiagcov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(KKrondiagcov_cppforR(params, data));
    return __result;
END_RCPP
}
// KKronar1cov_cppforR
arma::mat KKronar1cov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_KKronar1cov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(KKronar1cov_cppforR(params, data));
    return __result;
END_RCPP
}
// KKronar1hetcov_cppforR
arma::mat KKronar1hetcov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_KKronar1hetcov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(KKronar1hetcov_cppforR(params, data));
    return __result;
END_RCPP
}
// KKronarma11cov_cppforR
arma::mat KKronarma11cov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_KKronarma11cov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(KKronarma11cov_cppforR(params, data));
    return __result;
END_RCPP
}
// KKroncompsymmcov_cppforR
arma::mat KKroncompsymmcov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_KKroncompsymmcov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(KKroncompsymmcov_cppforR(params, data));
    return __result;
END_RCPP
}
// KKroncompsymmhetcov_cppforR
arma::mat KKroncompsymmhetcov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_KKroncompsymmhetcov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(KKroncompsymmhetcov_cppforR(params, data));
    return __result;
END_RCPP
}
// sppowcov_cppforR
arma::mat sppowcov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_sppowcov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(sppowcov_cppforR(params, data));
    return __result;
END_RCPP
}
// splincov_cppforR
arma::mat splincov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_splincov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(splincov_cppforR(params, data));
    return __result;
END_RCPP
}
// splinlogcov_cppforR
arma::mat splinlogcov_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_splinlogcov_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(splinlogcov_cppforR(params, data));
    return __result;
END_RCPP
}
// diagSig_cppforR
arma::mat diagSig_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_diagSig_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(diagSig_cppforR(params, data));
    return __result;
END_RCPP
}
// IdentSig_cppforR
arma::mat IdentSig_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_IdentSig_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(IdentSig_cppforR(params, data));
    return __result;
END_RCPP
}
// UnstrKronIdentSig_cppforR
arma::mat UnstrKronIdentSig_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_UnstrKronIdentSig_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(UnstrKronIdentSig_cppforR(params, data));
    return __result;
END_RCPP
}
// IdentKronUnstrSig_cppforR
arma::mat IdentKronUnstrSig_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_IdentKronUnstrSig_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(IdentKronUnstrSig_cppforR(params, data));
    return __result;
END_RCPP
}
// FA1hetSig_cppforR
arma::mat FA1hetSig_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_FA1hetSig_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(FA1hetSig_cppforR(params, data));
    return __result;
END_RCPP
}
// FA1homSig_cppforR
arma::mat FA1homSig_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_FA1homSig_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(FA1homSig_cppforR(params, data));
    return __result;
END_RCPP
}
// compsymmhomSig_cppforR
arma::mat compsymmhomSig_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_compsymmhomSig_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(compsymmhomSig_cppforR(params, data));
    return __result;
END_RCPP
}
// compsymmhetSig_cppforR
arma::mat compsymmhetSig_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_compsymmhetSig_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(compsymmhetSig_cppforR(params, data));
    return __result;
END_RCPP
}
// FAhetSig_cppforR
arma::mat FAhetSig_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_FAhetSig_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(FAhetSig_cppforR(params, data));
    return __result;
END_RCPP
}
// FAhomSig_cppforR
arma::mat FAhomSig_cppforR(const arma::vec& params, const arma::mat& data);
RcppExport SEXP SAMM_FAhomSig_cppforR(SEXP paramsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(FAhomSig_cppforR(params, data));
    return __result;
END_RCPP
}
